require 'rubygems'
require 'geminabox'
require 'pathname'
require 'net/ldap'

DN_TEMPLATE   = "uid=%s,ou=people,dc=example,dc=com"
LDAP_HOST     = "ldap.example.com"
LDAP_PORT     = 389

VALID_USERS   = %w( )
VALID_API_KEY = 'API_KEY'

Geminabox::Server.helpers do
  def protected!
    unless authorized?
      response['WWW-Authenticate'] = %(Basic realm="Example's Gem Repository")
      halt 401, "No pushing or deleting without auth.\n"
    end
  end

  def authorized?
    @auth ||=  Rack::Auth::Basic::Request.new(request.env)
    @auth.provided? && @auth.basic? && @auth.credentials && authenticates?(*@auth.credentials)
  end

  def authenticates?(username, password)
    return false unless VALID_USERS.empty? || !VALID_USERS.include?(username)

    begin
      return (ldap = Net::LDAP.new(
        host:  LDAP_HOST,
        port:  LDAP_PORT,
        auth:  {
          method:   :simple,
          username: DN_TEMPLATE % username,
          password: password },
        encryption:  { method: :start_tls }
      )).bind
    rescue StandardError => e
      $stderr.puts "#{e.class.name}: #{e.message}\n\t#{e.backtrace.join("\n\t")}"
    ensure
      ldap.close rescue nil
    end

    return false
  end
end

Geminabox::Server.before '/upload' do
  protected!
end

Geminabox::Server.before do
  protected! if request.delete?
end

Geminabox::Server.before '/api/v1/gems' do
  unless env['HTTP_AUTHORIZATION'] == VALID_API_KEY
    halt 401, "Access Denied. Api_key invalid or missing.\n"
  end
end

run Geminabox::Server